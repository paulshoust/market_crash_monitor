name: Build, Test, Publish, Deploy

on:
  push:
    branches: [ "main" ]
    tags:     [ "v*" ]

jobs:
  build_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: paulshoust/market_crash_monitor

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha

      - name: Build image (no push yet)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}


      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout (for docker-compose.yml)
        uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/opt/market_crash_monitor"
          strip_components: 0

      - name: Create/Update .env on server from GitHub Secrets and deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_MARKET_MONITOR }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_MARKET_MONITOR }}
          FRED_API_KEY: ${{ secrets.FRED_API_KEY_MARKET_MONITOR }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_MARKET_MONITOR }}
          PORTFOLIO_VALUE: ${{ secrets.PORTFOLIO_VALUE_MARKET_MONITOR }}
          ALERT_SEND_POLICY: ${{ secrets.ALERT_SEND_POLICY_MARKET_MONITOR }}
          SCHEDULE_CRON: "0 17 * * 1"        # Mondays 17:00 Madrid
          TZ: "Europe/Madrid"
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: TELEGRAM_BOT_TOKEN,TELEGRAM_CHAT_ID,FRED_API_KEY,OPENAI_API_KEY,PORTFOLIO_VALUE,ALERT_SEND_POLICY,SCHEDULE_CRON,TZ
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/market_crash_monitor/data
            sudo chown -R $USER:$USER /opt/market_crash_monitor
            cd /opt/market_crash_monitor

            umask 077
            TMP_ENV=".env.$$"
            {
              echo "ALERT_CHANNELS=telegram,stdout"
              echo "ALERT_SEND_POLICY=${ALERT_SEND_POLICY:-smart}"
              echo "WEEKLY_DAY=4"
              echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}"
              echo "TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}"
              echo "FRED_API_KEY=${FRED_API_KEY}"
              echo "LLM_SUMMARY=true"
              echo "OPENAI_API_KEY=${OPENAI_API_KEY}"
              if [ -n "${PORTFOLIO_VALUE:-}" ]; then
                echo "PORTFOLIO_VALUE=${PORTFOLIO_VALUE}"
              fi
              echo "CRASH_DASHBOARD_DATA_DIR=/data"
              echo "DATA_DIR=/data"
              echo "TZ=${TZ}"
              echo "SCHEDULE_CRON=${SCHEDULE_CRON}"
              echo "RUN_AT_START=0"
              echo "HEALTH_HTTP=1"
              echo "HEALTH_PORT=8087"
              echo "HEALTH_MAX_AGE_MIN=180"
            } > "${TMP_ENV}"
            mv -f "${TMP_ENV}" .env

            docker compose pull
            docker compose up -d
            docker compose ps
