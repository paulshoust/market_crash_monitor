name: Build, Test, Publish, Deploy

env:
  IMAGE_NAME: docker.io/paulsh1988/market_crash_monitor

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"

jobs:
  build_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha

      - name: Show tags we will build/push
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
          printf "%s" "${{ steps.meta.outputs.tags }}"

      # Build a local amd64 image and load into the runner for smoke testing
      - name: Build (local amd64, load)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}

      # Optional smoke test: LLM self-check using your OpenAI key
      - name: LLM smoke test
        run: |
          set -e
          IMG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          docker run --rm \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_MARKET_MONITOR }} \
            "$IMG" python /market_monitor/market_monitor.py --llm-test
        continue-on-error: true

      # Build and push multi-arch
      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          # required secrets (must be set in repo -> Settings -> Secrets -> Actions)
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          FRED_API_KEY:       ${{ secrets.FRED_API_KEY }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY_MARKET_MONITOR }}

          # optional secrets/vars
          PORTFOLIO_VALUE:    ${{ secrets.PORTFOLIO_VALUE_MARKET_MONITOR }}
          ALERT_SEND_POLICY:  ${{ secrets.ALERT_SEND_POLICY_MARKET_MONITOR }} # usually "smart"
          SERVER_USER:        ${{ secrets.SERVER_USER }}
          SERVER_HOST:        ${{ secrets.SERVER_HOST }}
          SSH_KEY:            ${{ secrets.SSH_KEY }}

          # runtime knobs (quoted to keep cron spaces intact)
          TZ: "Europe/Madrid"
          SCHEDULE_CRON: "0 */6 * * *"   # every 6 hours
          WEEKLY_CRON:   "0 17 * * 1"    # Monday 17:00
          WEEKLY_DAY: "0"                # Monday for legacy should_send weekly gate
          HEALTH_MAX_AGE_MIN: "390"      # > 6.5h -> avoids false unhealthy
          ALERT_CHANNELS: "telegram,stdout"
          LLM_SUMMARY: "true"
          IMAGE_NAME: "docker.io/paulsh1988/market_crash_monitor:latest"
          DEPLOY_DIR: "/home/${{ secrets.SERVER_USER }}/market_monitor"
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: TELEGRAM_BOT_TOKEN,TELEGRAM_CHAT_ID,FRED_API_KEY,OPENAI_API_KEY,PORTFOLIO_VALUE,ALERT_SEND_POLICY,SCHEDULE_CRON,WEEKLY_CRON,WEEKLY_DAY,HEALTH_MAX_AGE_MIN,ALERT_CHANNELS,LLM_SUMMARY,TZ,IMAGE_NAME,DEPLOY_DIR
          script: |
            set -euo pipefail

            echo "Using DEPLOY_DIR=$DEPLOY_DIR"
            [ -d "$DEPLOY_DIR" ] && [ -f "$DEPLOY_DIR/docker-compose.yml" ] || { echo "ERROR: compose dir missing"; exit 1; }
            cd "$DEPLOY_DIR"

            # ---- Fail fast if critical secrets are empty ----
            [ -n "${TELEGRAM_BOT_TOKEN:-}" ] || { echo "ERROR: TELEGRAM_BOT_TOKEN is empty"; exit 1; }
            [ -n "${TELEGRAM_CHAT_ID:-}"   ] || { echo "ERROR: TELEGRAM_CHAT_ID is empty"; exit 1; }
            [ -n "${OPENAI_API_KEY:-}"     ] || { echo "ERROR: OPENAI_API_KEY is empty"; exit 1; }
            [ -n "${FRED_API_KEY:-}"       ] || echo "WARN: FRED_API_KEY is empty (FRED series will be skipped)"

            umask 077
            TMP_ENV=".env.$$"

            # helper to keep old non-empty values if new value is empty
            keep_or_set () {
              key="$1"; new="$2"
              if [ -n "$new" ]; then
                echo "$key=$new"
              elif [ -f .env ] && grep -q "^$key=" .env; then
                grep "^$key=" .env
              else
                echo "$key="
              fi
            }

            {
              echo "IMAGE_NAME=${IMAGE_NAME}"
              echo "TZ=${TZ}"
              echo "DATA_DIR=/data"
              echo "CRASH_DASHBOARD_DATA_DIR=/data"

              # cadence & health
              echo "SCHEDULE_CRON=${SCHEDULE_CRON}"
              echo "WEEKLY_CRON=${WEEKLY_CRON}"
              echo "WEEKLY_DAY=${WEEKLY_DAY}"
              echo "HEALTH_HTTP=1"
              echo "HEALTH_PORT=8087"
              echo "HEALTH_MAX_AGE_MIN=${HEALTH_MAX_AGE_MIN}"
              echo "RUN_AT_START=0"

              # alerts & policy
              echo "ALERT_CHANNELS=${ALERT_CHANNELS}"
              keep_or_set ALERT_SEND_POLICY "${ALERT_SEND_POLICY:-smart}"

              # LLM & tokens
              echo "LLM_SUMMARY=${LLM_SUMMARY}"
              keep_or_set OPENAI_API_KEY "${OPENAI_API_KEY}"
              keep_or_set FRED_API_KEY "${FRED_API_KEY}"
              keep_or_set TELEGRAM_BOT_TOKEN "${TELEGRAM_BOT_TOKEN}"
              keep_or_set TELEGRAM_CHAT_ID "${TELEGRAM_CHAT_ID}"

              # optional portfolio sizing
              [ -n "${PORTFOLIO_VALUE:-}" ] && echo "PORTFOLIO_VALUE=${PORTFOLIO_VALUE}"
            } > "$TMP_ENV"

            mv -f "$TMP_ENV" .env
            echo "Wrote $(wc -c <.env) bytes into .env"

            # compose wrapper
            DC="docker compose -f docker-compose.yml"

            # Pull the new image tag (if using image) or build (if using build:)
            $DC pull || true

            echo "Stopping/removing existing container..."
            docker rm -f market-crash-monitor >/dev/null 2>&1 || true

            echo "Recreating stack..."
            $DC up -d
            $DC ps

            echo "Pruning dangling images..."
            docker image prune -f
